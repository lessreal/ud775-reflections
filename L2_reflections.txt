Reflections
--------------------
Lesson 2:

What happens when you initialize a repository? Why do you need to do it?
- Git creates a hidden directory to store the repository, including data on all commits in the project.
- Initializing a repository is necessary because otherwise git will be unable to track any changes.

How is the staging area different from the working directory and the repository? What value do you think it offers?
- The staging area is a temporary area to hold files with changes that are not yet part of a commit.
- Changes to files in the working directory do not affect files in the staging area until those files are manually added with git add.
- Once a git commit is applied, all files in the staging area become part of a new commit in the repository.
- This approach allows for some experimentation with files in the working directory that you may not necessarily want to add to a commit.

How can you use the staging area to make sure you have one commit per logical change?
- Choosing which files to add to the staging areas ensures that you are committing only the changes you want.
- Being able to check the differences between the staging area and the repository or working directory allows you to examine changes before they are committed.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
- If you want to experiment with some new features, you can create new branches to work on them without cluttering up or affecting the stability of the master branch.
- If multiple people are working on the code simultaneously, they can each work on their own branch and merge their changes back in when they are done.

How do the diagrams help you visualize the branch structure?
- They clarify the relationships between and lineage of the various commits.
- They emphasize the necessity of creating branches; because a commit only keeps track of its parents, commits on other branches would become unreachable without branch names.
