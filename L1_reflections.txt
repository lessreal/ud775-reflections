Reflections
--------------------
Lesson 1:

How did viewing a diff between two versions help you spot the bug?
- It highlighted the changes automatically, so I didn't have to manually scroll through the files.
- Because the areas that were changed were only a few lines of code, I only had to focus on a few small sections.

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?
- New bugs would be easier to track down because I could move back to a point before the bug was introduced and see what changes were made after.
- I would have the security of knowing that a working version of the project could still be accessed while experimenting with new code.

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?
- The manual commit allows me to choose a logical point to save a project, so each version is more likely to be working.
- It results in fewer unnecessary versions being saved, so each version will have some meaningful difference from the last.

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?
- Git is designed for projects with multiple interrelated pieces of code that may be contained in different files, so it is important to keep track of all of them together.
- Other systems that are designed for standalone documents, which do not typically interact with one another, do not need to keep track of all files at once.

How can you use the commands git log and git diff to view the history of files?
- git log shows a list of all commits to a project, including commit ids, authors, dates and messages describing the changes for each commit.
- git diff [id1] [id2] shows the difference between two commits based on their ids.

How might using version control make you more confident to make changes that could break something?
- If I end up breaking something, version control makes it easy to return to a point where the code was working, so there is less risk involved.
- Being able to compare the current commit to older versions can make it easier to spot where bugs were introduced, so it is easier to fix them.

Now that you have your workspace set up, what do you want to try using Git for?
- I have some personal projects that I plan to develop into a web portfolio.
- I plan to take a number of programming and web development MOOCs, and this will help me organize my code for assignments and projects in those.
- I would like to contribute to other people's projects.
